#include <catch2/catch.hpp>

#include "beyond/random/generators/xorshift32.hpp"
#include <limits>
#include <random>

TEST_CASE("xorshift32", "[beyond.random]")
{
  STATIC_REQUIRE(beyond::xorshift32::min() ==
                 std::numeric_limits<std::uint32_t>::min());
  STATIC_REQUIRE(beyond::xorshift32::max() ==
                 std::numeric_limits<std::uint32_t>::max());

  constexpr uint32_t state_0 = 1u;
  constexpr uint32_t state_1 = 268476417u;
  constexpr uint32_t state_2 = 1157628417u;

  SECTION("Default constructor")
  {
    beyond::xorshift32 g;

    REQUIRE(g.state == state_0);
    REQUIRE(g() == state_1);
    REQUIRE(g() == state_2);
  }

  SECTION("Change seed")
  {
    beyond::xorshift32 g;
    g.seed(100);
    REQUIRE(g.state == 100);
  }

  SECTION("Discard")
  {
    beyond::xorshift32 g;
    g.discard(1);
    REQUIRE(g() == state_2);
  }

  SECTION("Generated by std::random device")
  {
    beyond::xorshift32 g{std::random_device{}()};
  }

  SECTION("Comparisons")
  {
    beyond::xorshift32 g1{5};
    beyond::xorshift32 g2{5};
    beyond::xorshift32 g3{100};
    CHECK(g1 == g2);
    CHECK(g1 != g3);
  }
}
